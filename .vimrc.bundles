set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Plugins
"----------------------------------------------------------------------

" auto-pairs
Plugin 'jiangmiao/auto-pairs'

" 显示代码行尾的空格
Plugin 'ntpeters/vim-better-whitespace'
" 一键清理代码行尾的空格
nnoremap cc :%s/\s\+$//<cr>:let @/=''<CR>

" 状态栏 airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1   " 是否打开tabline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'bubblegum'
let g:airline#extensions#tabline#enabled = 1   " 显示窗口tab和buffer
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'

" YouCompleteMe
Bundle 'Valloric/YouCompleteMe'
"let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
" 补全功能在注释中同样有效
let g:ycm_complete_in_comments = 1

" YCM相关快捷键，分别是\gl, \gf, \gg
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>

let g:ycm_collect_identifiers_from_tags_files = 1	 " 开启 YCM 基于标签引擎
let g:ycm_cache_omnifunc = 0                         " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax = 1	         " 语法关键字补全

let g:ycm_show_diagnostics_ui = 0                    " 不显示语法检测

" 定义触发类型
let g:ycm_semantic_triggers = {
    \   'c':['->','.','re!\w{2}'],
    \   'cpp':['->', '.', 're!\w{2}'],
    \   'python':['.', ',', 're!(import\s+|from\s+(\w+\s+(import\s+(\w+,\s+)*)?)?)', 're!\w{2}'],
    \   'html': ['<', '"', '</', ' '],
    \}

" nerdtree
Plugin 'scrooloose/nerdtree'
let NERDChristmasTree = 0
let NERDTreeWinSize = 25
let NERDTreeChDirMode = 2
let NERDTreeIgnore = ['\~$', '\.pyc$', '\.swp$', '\.o$', 'tags', 'cscope*']
let NERDTreeShowBookmarks = 1
let NERDTreeWinPos = "left"
" Automatically open a NERDTree if no files where specified
autocmd vimenter * if !argc() | NERDTree | endif
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Open or close a NERDTree
nnoremap <F3> :NERDTreeMirror<CR>
nnoremap <F3> :NERDTreeToggle<CR>
" 当vim中没有其他文件，只剩下nerdtree的时候，自动关闭窗口
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" 改变nerdtree的箭头
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('h', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('cpp', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

"Plugin 'mbbill/echofunc'

" Underlines the word under the cursor
Plugin 'itchyny/vim-cursorword'

" a class outline viewer for Vim, like taglist
Plugin 'majutsushi/tagbar'

"autocmd BufReadPost *.cpp,*.c,*.h,*.cc,*.cxx call tagbar#autoopen()
let g:tagbar_ctags_bin = 'ctags'          " ctags程序的路径
let g:tagbar_width = 30                   " 窗口宽度
map <F4> :Tagbar<CR>
" 开启自动预览(随着光标在标签上的移动，顶部会出现一个实时的预览窗口)
"let g:tagbar_autopreview = 1

Plugin 'easymotion/vim-easymotion'
nmap ss <Plug>(easymotion-s2)

" 动态语法检测
"Plugin 'w0rp/ale'

" 始终开启标志列
"let g:ale_sign_column_always = 1
"let g:ale_set_highlights = 1
"" 自定义error和warning图标
"let g:ale_sign_error = '✗'
"let g:ale_sign_warning = '⚡'
"let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
"let g:ale_echo_msg_error_str = 'E'
"let g:ale_echo_msg_warning_str = 'W'
""let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"let g:ale_echo_msg_format = '[%linter%] %code: %%s'
"let g:ale_lint_on_text_changed = 'normal'
"let g:ale_lint_on_insert_leave = 1
"let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
"let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
"let g:ale_c_cppcheck_options = ''
"let g:ale_cpp_cppcheck_options = ''
" 打开文件时不进行检查
"let g:ale_lint_on_enter = 0
" 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
"nmap sp <Plug>(ale_previous_wrap)
"nmap sn <Plug>(ale_next_wrap)
"" <Leader>s触发/关闭语法检查
"nmap <Leader>s :ALEToggle<CR>
"" <Leader>d查看错误或警告的详细信息
"nmap <Leader>d :ALEDetail<CR>

" 自动更新tags
"Plugin 'ludovicchabant/vim-gutentags'

" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
"let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
" 配置 ctags 的参数 "
"let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
"let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
"let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

"----------------------------------------------------------------------

" complete for javascript: use .tern-project config
Plugin 'marijnh/tern_for_vim'
"autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
"autocmd FileType javascript setlocal omnifunc=tern#Complete

call vundle#end()            " required
filetype plugin indent on    " required
